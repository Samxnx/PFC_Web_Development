{"ast":null,"code":"const getUser = () => {\n  const existingUser = sessionStorage.getItem('userId');\n  if (existingUser) {\n    return existingUser;\n  } else {\n    const newUser = 'user-' + new Date().getTime();\n    sessionStorage.setItem('userId', newUser);\n    return newUser;\n  }\n};\nconst getDataKey = () => {\n  const userId = getUser();\n  return `hotOnion/carts/${userId}`;\n};\n\n// push to local storage: a temporary place for database\nconst getDatabaseCart = () => {\n  const dataKey = getDataKey();\n  const data = localStorage.getItem(dataKey) || \"{}\";\n  return JSON.parse(data);\n};\nconst addToDatabaseCart = (key, count) => {\n  const currentCart = getDatabaseCart();\n  currentCart[key] = count;\n  localStorage.setItem(getDataKey(), JSON.stringify(currentCart));\n};\nconst removeFromDatabaseCart = key => {\n  const currentCart = getDatabaseCart();\n  delete currentCart[key];\n  localStorage.setItem(getDataKey(), JSON.stringify(currentCart));\n};\nconst processOrder = cart => {\n  localStorage.removeItem(getDataKey());\n};\nexport { addToDatabaseCart, getDatabaseCart, removeFromDatabaseCart, processOrder };\n\n// polyfill to support older browser\nconst localStorage = window.localStorage || (() => {\n  let store = {};\n  return {\n    getItem(key) {\n      return store[key];\n    },\n    setItem(key, value) {\n      store[key] = value.toString();\n    },\n    clear() {\n      store = {};\n    }\n  };\n})();\nconst sessionStorage = window.sessionStorage || (() => {\n  let store = {};\n  return {\n    getItem(key) {\n      return store[key];\n    },\n    setItem(key, value) {\n      store[key] = value.toString();\n    },\n    clear() {\n      store = {};\n    }\n  };\n})();\n// end of poly fill","map":{"version":3,"names":["getUser","existingUser","sessionStorage","getItem","newUser","Date","getTime","setItem","getDataKey","userId","getDatabaseCart","dataKey","data","localStorage","JSON","parse","addToDatabaseCart","key","count","currentCart","stringify","removeFromDatabaseCart","processOrder","cart","removeItem","window","store","value","toString","clear"],"sources":["/Users/rohanchaudhari/Downloads/react-red-onion-restaurant-master/src/utilities/databaseManager.js"],"sourcesContent":["const getUser = () => {\n    const existingUser = sessionStorage.getItem('userId');\n    if (existingUser) {\n        return existingUser; \n    } else {\n        const newUser = 'user-' + new Date().getTime();\n        sessionStorage.setItem('userId', newUser)\n        return newUser;\n    }\n}\n\n\nconst getDataKey = () => {\n    const userId = getUser();\n    return `hotOnion/carts/${userId}`\n}\n\n// push to local storage: a temporary place for database\nconst getDatabaseCart = () => {\n    const dataKey = getDataKey();\n    const data = localStorage.getItem(dataKey) || \"{}\";\n    return JSON.parse(data);\n}\n\nconst addToDatabaseCart = (key, count) => {\n    const currentCart = getDatabaseCart();\n    currentCart[key] = count;\n    localStorage.setItem(getDataKey(), JSON.stringify(currentCart));\n}\n\nconst removeFromDatabaseCart = key => {\n    const currentCart = getDatabaseCart();\n    delete currentCart[key];\n    localStorage.setItem(getDataKey(), JSON.stringify(currentCart));\n}\n\nconst processOrder = (cart) => {\n    localStorage.removeItem(getDataKey());\n}\n\n\nexport { addToDatabaseCart, getDatabaseCart, removeFromDatabaseCart, processOrder };\n\n\n// polyfill to support older browser\nconst localStorage = window.localStorage || (() => {\n  let store = {}\n  return {\n    getItem(key) {\n      return store[key]\n    },\n    setItem(key, value) {\n      store[key] = value.toString()\n    },\n    clear() {\n      store = {}\n    }\n  };\n})()\n\nconst sessionStorage = window.sessionStorage || (() => {\n  let store = {}\n  return {\n    getItem(key) {\n      return store[key]\n    },\n    setItem(key, value) {\n      store[key] = value.toString()\n    },\n    clear() {\n      store = {}\n    }\n  };\n})()\n// end of poly fill"],"mappings":"AAAA,MAAMA,OAAO,GAAGA,CAAA,KAAM;EAClB,MAAMC,YAAY,GAAGC,cAAc,CAACC,OAAO,CAAC,QAAQ,CAAC;EACrD,IAAIF,YAAY,EAAE;IACd,OAAOA,YAAY;EACvB,CAAC,MAAM;IACH,MAAMG,OAAO,GAAG,OAAO,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IAC9CJ,cAAc,CAACK,OAAO,CAAC,QAAQ,EAAEH,OAAO,CAAC;IACzC,OAAOA,OAAO;EAClB;AACJ,CAAC;AAGD,MAAMI,UAAU,GAAGA,CAAA,KAAM;EACrB,MAAMC,MAAM,GAAGT,OAAO,EAAE;EACxB,OAAQ,kBAAiBS,MAAO,EAAC;AACrC,CAAC;;AAED;AACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC1B,MAAMC,OAAO,GAAGH,UAAU,EAAE;EAC5B,MAAMI,IAAI,GAAGC,YAAY,CAACV,OAAO,CAACQ,OAAO,CAAC,IAAI,IAAI;EAClD,OAAOG,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;AAC3B,CAAC;AAED,MAAMI,iBAAiB,GAAGA,CAACC,GAAG,EAAEC,KAAK,KAAK;EACtC,MAAMC,WAAW,GAAGT,eAAe,EAAE;EACrCS,WAAW,CAACF,GAAG,CAAC,GAAGC,KAAK;EACxBL,YAAY,CAACN,OAAO,CAACC,UAAU,EAAE,EAAEM,IAAI,CAACM,SAAS,CAACD,WAAW,CAAC,CAAC;AACnE,CAAC;AAED,MAAME,sBAAsB,GAAGJ,GAAG,IAAI;EAClC,MAAME,WAAW,GAAGT,eAAe,EAAE;EACrC,OAAOS,WAAW,CAACF,GAAG,CAAC;EACvBJ,YAAY,CAACN,OAAO,CAACC,UAAU,EAAE,EAAEM,IAAI,CAACM,SAAS,CAACD,WAAW,CAAC,CAAC;AACnE,CAAC;AAED,MAAMG,YAAY,GAAIC,IAAI,IAAK;EAC3BV,YAAY,CAACW,UAAU,CAAChB,UAAU,EAAE,CAAC;AACzC,CAAC;AAGD,SAASQ,iBAAiB,EAAEN,eAAe,EAAEW,sBAAsB,EAAEC,YAAY;;AAGjF;AACA,MAAMT,YAAY,GAAGY,MAAM,CAACZ,YAAY,IAAI,CAAC,MAAM;EACjD,IAAIa,KAAK,GAAG,CAAC,CAAC;EACd,OAAO;IACLvB,OAAOA,CAACc,GAAG,EAAE;MACX,OAAOS,KAAK,CAACT,GAAG,CAAC;IACnB,CAAC;IACDV,OAAOA,CAACU,GAAG,EAAEU,KAAK,EAAE;MAClBD,KAAK,CAACT,GAAG,CAAC,GAAGU,KAAK,CAACC,QAAQ,EAAE;IAC/B,CAAC;IACDC,KAAKA,CAAA,EAAG;MACNH,KAAK,GAAG,CAAC,CAAC;IACZ;EACF,CAAC;AACH,CAAC,GAAG;AAEJ,MAAMxB,cAAc,GAAGuB,MAAM,CAACvB,cAAc,IAAI,CAAC,MAAM;EACrD,IAAIwB,KAAK,GAAG,CAAC,CAAC;EACd,OAAO;IACLvB,OAAOA,CAACc,GAAG,EAAE;MACX,OAAOS,KAAK,CAACT,GAAG,CAAC;IACnB,CAAC;IACDV,OAAOA,CAACU,GAAG,EAAEU,KAAK,EAAE;MAClBD,KAAK,CAACT,GAAG,CAAC,GAAGU,KAAK,CAACC,QAAQ,EAAE;IAC/B,CAAC;IACDC,KAAKA,CAAA,EAAG;MACNH,KAAK,GAAG,CAAC,CAAC;IACZ;EACF,CAAC;AACH,CAAC,GAAG;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}